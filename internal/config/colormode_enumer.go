// Code generated by "enumer -type ColorMode -trimprefix ColorMode -transform lower -text"; DO NOT EDIT.

package config

import (
	"fmt"
	"strings"
)

const _ColorModeName = "1bit2bit"

var _ColorModeIndex = [...]uint8{0, 4, 8}

const _ColorModeLowerName = "1bit2bit"

func (i ColorMode) String() string {
	if i >= ColorMode(len(_ColorModeIndex)-1) {
		return fmt.Sprintf("ColorMode(%d)", i)
	}
	return _ColorModeName[_ColorModeIndex[i]:_ColorModeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ColorModeNoOp() {
	var x [1]struct{}
	_ = x[ColorMode1Bit-(0)]
	_ = x[ColorMode2Bit-(1)]
}

var _ColorModeValues = []ColorMode{ColorMode1Bit, ColorMode2Bit}

var _ColorModeNameToValueMap = map[string]ColorMode{
	_ColorModeName[0:4]:      ColorMode1Bit,
	_ColorModeLowerName[0:4]: ColorMode1Bit,
	_ColorModeName[4:8]:      ColorMode2Bit,
	_ColorModeLowerName[4:8]: ColorMode2Bit,
}

var _ColorModeNames = []string{
	_ColorModeName[0:4],
	_ColorModeName[4:8],
}

// ColorModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ColorModeString(s string) (ColorMode, error) {
	if val, ok := _ColorModeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ColorModeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ColorMode values", s)
}

// ColorModeValues returns all values of the enum
func ColorModeValues() []ColorMode {
	return _ColorModeValues
}

// ColorModeStrings returns a slice of all String values of the enum
func ColorModeStrings() []string {
	strs := make([]string, len(_ColorModeNames))
	copy(strs, _ColorModeNames)
	return strs
}

// IsAColorMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ColorMode) IsAColorMode() bool {
	for _, v := range _ColorModeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for ColorMode
func (i ColorMode) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ColorMode
func (i *ColorMode) UnmarshalText(text []byte) error {
	var err error
	*i, err = ColorModeString(string(text))
	return err
}
